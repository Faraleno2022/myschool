#!/usr/bin/env python
"""
Test de s√©curit√© et d'isolation des donn√©es entre √©coles
"""
import os
import sys

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecole_moderne.settings')

import django
django.setup()

from django.contrib.auth.models import User
from django.test import Client
from eleves.models import Ecole, Eleve, Classe
from utilisateurs.models import Profil
from paiements.models import Paiement
from notes.models import Note


def test_data_isolation():
    """Test d'isolation des donn√©es entre √©coles"""
    print("üîí Test d'isolation des donn√©es entre √©coles...\n")
    
    # Cr√©er deux √©coles de test
    import uuid
    
    ecole1 = Ecole.objects.create(
        nom="√âcole Test 1",
        slug=f"ecole-test-1-{str(uuid.uuid4())[:8]}",
        type_ecole="PRIVEE",
        adresse="Adresse 1",
        ville="Conakry",
        prefecture="Conakry",
        telephone="+224111111111",
        email="test1@ecole.com",
        directeur="Directeur 1",
        statut="ACTIVE"
    )
    
    ecole2 = Ecole.objects.create(
        nom="√âcole Test 2", 
        slug=f"ecole-test-2-{str(uuid.uuid4())[:8]}",
        type_ecole="PRIVEE",
        adresse="Adresse 2",
        ville="Conakry",
        prefecture="Conakry",
        telephone="+224222222222",
        email="test2@ecole.com",
        directeur="Directeur 2",
        statut="ACTIVE"
    )
    
    # Cr√©er des utilisateurs pour chaque √©cole
    timestamp = str(int(time.time()))
    
    user1 = User.objects.create_user(
        username=f"admin_ecole1_{timestamp}",
        password="testpass123"
    )
    
    user2 = User.objects.create_user(
        username=f"admin_ecole2_{timestamp}",
        password="testpass123"
    )
    
    # Cr√©er des profils
    profil1 = Profil.objects.create(
        user=user1,
        role="ADMIN",
        telephone="+224333333333",
        ecole=ecole1,
        actif=True
    )
    
    profil2 = Profil.objects.create(
        user=user2,
        role="ADMIN", 
        telephone="+224444444444",
        ecole=ecole2,
        actif=True
    )
    
    # Cr√©er des classes pour chaque √©cole
    classe1 = Classe.objects.create(
        ecole=ecole1,
        nom="CP1",
        niveau="PRIMAIRE_1",
        annee_scolaire="2024-2025"
    )
    
    classe2 = Classe.objects.create(
        ecole=ecole2,
        nom="CP1",
        niveau="PRIMAIRE_1", 
        annee_scolaire="2024-2025"
    )
    
    print("‚úÖ √âcoles et utilisateurs de test cr√©√©s")
    
    # Test 1: V√©rifier que les QuerySets filtrent par √©cole
    try:
        # Simuler une requ√™te depuis l'√©cole 1
        classes_ecole1 = Classe.objects.filter(ecole=ecole1)
        classes_ecole2 = Classe.objects.filter(ecole=ecole2)
        
        assert classes_ecole1.count() == 1
        assert classes_ecole2.count() == 1
        assert classe1 in classes_ecole1
        assert classe1 not in classes_ecole2
        
        print("‚úÖ Isolation des classes par √©cole")
    except Exception as e:
        print(f"‚ùå Erreur isolation classes: {e}")
        return False
    
    # Test 2: V√©rifier l'isolation des profils
    try:
        profils_ecole1 = Profil.objects.filter(ecole=ecole1)
        profils_ecole2 = Profil.objects.filter(ecole=ecole2)
        
        assert profil1 in profils_ecole1
        assert profil1 not in profils_ecole2
        assert profil2 not in profils_ecole1
        assert profil2 in profils_ecole2
        
        print("‚úÖ Isolation des profils par √©cole")
    except Exception as e:
        print(f"‚ùå Erreur isolation profils: {e}")
        return False
    
    # Test 3: Test avec Client Django (simulation navigation)
    client = Client()
    
    try:
        # Connexion utilisateur √©cole 1
        login_success = client.login(username=f"admin_ecole1_{timestamp}", password="testpass123")
        assert login_success, "√âchec connexion utilisateur √©cole 1"
        
        # V√©rifier que la session contient la bonne √©cole
        response = client.get('/')
        assert response.status_code == 200
        
        client.logout()
        print("‚úÖ Test de navigation s√©curis√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur test navigation: {e}")
        return False
    
    # Nettoyage
    try:
        profil1.delete()
        profil2.delete()
        classe1.delete()
        classe2.delete()
        ecole1.delete()
        ecole2.delete()
        user1.delete()
        user2.delete()
        print("‚úÖ Nettoyage effectu√©")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur nettoyage: {e}")
    
    return True


def test_middleware_security():
    """Test de s√©curit√© du middleware"""
    print("\nüõ°Ô∏è  Test de s√©curit√© du middleware...\n")
    
    client = Client()
    
    # Test 1: Acc√®s sans authentification
    try:
        response = client.get('/eleves/liste/')
        # Doit rediriger vers login
        assert response.status_code in [302, 403], f"Code inattendu: {response.status_code}"
        print("‚úÖ Acc√®s prot√©g√© sans authentification")
    except Exception as e:
        print(f"‚ùå Erreur test acc√®s: {e}")
        return False
    
    # Test 2: Page d'accueil accessible
    try:
        response = client.get('/')
        assert response.status_code == 200
        print("‚úÖ Page d'accueil accessible")
    except Exception as e:
        print(f"‚ùå Erreur page accueil: {e}")
        return False
    
    return True


def check_model_security():
    """V√©rifier la s√©curit√© au niveau des mod√®les"""
    print("\nüîç V√©rification s√©curit√© des mod√®les...\n")
    
    try:
        # V√©rifier que tous les mod√®les principaux ont une relation avec Ecole
        from eleves.models import Eleve, Classe, Responsable
        from paiements.models import Paiement
        from notes.models import Note, Evaluation
        
        # V√©rifier les relations
        assert hasattr(Classe, 'ecole'), "Classe doit avoir une relation ecole"
        assert hasattr(Eleve, 'classe'), "Eleve doit avoir une relation classe (via √©cole)"
        
        print("‚úÖ Relations √©cole correctement d√©finies")
        
        # V√©rifier les contraintes unique_together
        classe_meta = Classe._meta
        unique_together = getattr(classe_meta, 'unique_together', [])
        
        if unique_together:
            print("‚úÖ Contraintes unique_together d√©finies")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification mod√®les: {e}")
        return False


def main():
    """Test principal"""
    print("üîê TESTS DE S√âCURIT√â MULTI-TENANT\n")
    
    import time
    global time
    
    tests = [
        ("Isolation des donn√©es", test_data_isolation),
        ("S√©curit√© middleware", test_middleware_security), 
        ("S√©curit√© mod√®les", check_model_security)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append(result)
            if result:
                print(f"‚úÖ {test_name}: R√âUSSI\n")
            else:
                print(f"‚ùå {test_name}: √âCHEC\n")
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}\n")
            results.append(False)
    
    # R√©sum√©
    success_count = sum(results)
    total_tests = len(results)
    
    print("=" * 50)
    print(f"üéØ R√âSULTATS: {success_count}/{total_tests} tests r√©ussis")
    
    if success_count == total_tests:
        print("üéâ S√âCURIT√â MULTI-TENANT VALID√âE!")
        print("\n‚úÖ Le syst√®me garantit:")
        print("   - Isolation compl√®te des donn√©es entre √©coles")
        print("   - Protection contre l'acc√®s non autoris√©")
        print("   - Middleware de s√©curit√© fonctionnel")
        return True
    else:
        print("‚ö†Ô∏è  PROBL√àMES DE S√âCURIT√â D√âTECT√âS!")
        return False


if __name__ == "__main__":
    import time
    success = main()
    if not success:
        sys.exit(1)
