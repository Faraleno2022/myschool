"""
Django settings for ecole_moderne project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
try:
    from dotenv import load_dotenv
except Exception:
    load_dotenv = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Charger les variables d'environnement depuis un fichier .env si disponible
if load_dotenv:
    load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'dev-unsafe-key')

# SECURITY WARNING: don't run with debug turned on in production!
# Piloté par la variable d'environnement DJANGO_DEBUG: 'true'/'false'
DEBUG = os.environ.get('DJANGO_DEBUG', 'true').lower() == 'true'

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'gshadjakanfingdiane.pythonanywhere.com']

# CSRF trusted origins: use production origin in prod, local http origins in dev
if DEBUG:
    CSRF_TRUSTED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
    ]
else:
    CSRF_TRUSTED_ORIGINS = ['https://gshadjakanfingdiane.pythonanywhere.com']

# ===== PARAMÈTRES DE SÉCURITÉ RENFORCÉS =====

# Cookies et redirections sécurisées en production (HTTPS)
# En dev (DEBUG=True), ne pas forcer "secure" pour permettre les cookies en HTTP
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
SECURE_SSL_REDIRECT = not DEBUG

# HSTS (HTTP Strict Transport Security)
SECURE_HSTS_SECONDS = 0 if DEBUG else 31536000  # 1 an en production
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG

# Protection contre le détournement de contenu
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'  # Empêche l'intégration dans des iframes

# Sécurité des cookies
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
CSRF_COOKIE_SAMESITE = 'Strict'

# Expiration de session (30 minutes d'inactivité)
SESSION_COOKIE_AGE = 1800  # 30 minutes
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# Réduire les écritures en base à chaque requête (utile avec SQLite)
SESSION_SAVE_EVERY_REQUEST = False

# Protection contre les attaques de timing
USE_TZ = True

# Durée avant re-vérification du téléphone (par défaut 4 heures)
# Peut être surchargée via la variable d'environnement PHONE_VERIFY_TTL_SECONDS
PHONE_VERIFY_TTL_SECONDS = int(os.environ.get('PHONE_VERIFY_TTL_SECONDS', 4 * 3600))

# Limitation des uploads
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000

# En-têtes de sécurité supplémentaires
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Cache pour le rate limiting et le blocage d'IP
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'security-cache',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # Pour le formatage des nombres
    
    # Applications de gestion scolaire
    'eleves',
    'paiements',
    'depenses',
    'salaires',
    'utilisateurs',
    'rapports',
    'administration',
    'bus',
    'notes'
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Activer les middlewares de sécurité avancés uniquement en production
if not DEBUG:
    # Insertion après la SecurityMiddleware standard et avant les autres
    MIDDLEWARE.insert(1, 'ecole_moderne.security_middleware.SecurityMiddleware')
    MIDDLEWARE.insert(3, 'ecole_moderne.security_middleware.SessionSecurityMiddleware')
    MIDDLEWARE.insert(5, 'ecole_moderne.security_middleware.CSRFSecurityMiddleware')
    # CSP/headers de sécurité (en fin de chaîne pour setter les en-têtes)
    MIDDLEWARE.append('ecole_moderne.security_middleware.CSPMiddleware')

ROOT_URLCONF = 'ecole_moderne.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'utilisateurs.context_processors.user_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecole_moderne.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        # Options pour atténuer les verrous SQLite en prod
        'OPTIONS': {
            'timeout': 30,  # secondes
        },
        # Fermer la connexion à la fin de chaque requête pour éviter de garder des verrous
        'CONN_MAX_AGE': 0,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# Validation des mots de passe renforcée
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,  # Minimum 12 caractères
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'  # Français pour la Guinée

TIME_ZONE = 'Africa/Conakry'  # Fuseau horaire de la Guinée

USE_I18N = True

USE_TZ = True

# Configuration des séparateurs de milliers (format français)
USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = ' '  # Espace comme séparateur de milliers
NUMBER_GROUPING = 3  # Groupement par 3 chiffres

# Configuration spécifique à la Guinée
DEFAULT_CURRENCY = 'GNF'  # Francs Guinéens
DEFAULT_COUNTRY_CODE = '+224'  # Code téléphonique Guinée

# Configuration de l'authentification
# Utiliser la page de connexion personnalisée des utilisateurs
LOGIN_URL = '/utilisateurs/login/'
LOGIN_REDIRECT_URL = '/eleves/'  # Redirection après connexion
LOGOUT_REDIRECT_URL = '/utilisateurs/login/'  # Redirection après déconnexion


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Configuration pour l'optimisation des images
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Cache pour les fichiers statiques (améliore les performances)
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Configuration du cache pour les images
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    },
    'images': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'image-cache',
        'TIMEOUT': 3600,  # 1 heure pour les images
        'OPTIONS': {
            'MAX_ENTRIES': 500,
        }
    }
}

# Media files (user-uploaded)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===== CONFIGURATION DE LOGGING POUR LA SÉCURITÉ =====

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'security': {
            'format': '[SECURITY] {levelname} {asctime} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'formatter': 'security',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'ecole_moderne.security_middleware': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# Créer le dossier logs s'il n'existe pas
import os
logs_dir = BASE_DIR / 'logs'
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

# ===== PARAMÈTRES DE SÉCURITÉ SUPPLÉMENTAIRES =====

# Désactiver les informations de debug en production
if not DEBUG:
    ALLOWED_HOSTS = ['gshadjakanfingdiane.pythonanywhere.com']
    # Recommandations PythonAnywhere: signaler le schéma HTTPS derrière le proxy
    # pour éviter les problèmes de détection de HTTP/HTTPS (redirections, cookies Secure, CSRF)
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # Utiliser l'hôte transmis par le proxy
    USE_X_FORWARDED_HOST = True
    
    # Masquer la version de Django
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    
    # Forcer HTTPS en production
    SECURE_SSL_REDIRECT = True
    
    # Sécuriser les cookies
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # Utiliser les sessions via cookies signés en production pour éviter les écritures DB
    # (réduit fortement les risques de "database is locked" avec SQLite)
    SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

# Protection contre les attaques par déni de service
DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB

# Limitation du nombre de connexions simultanées par IP
MAX_CONNECTIONS_PER_IP = 10

# Temps de blocage pour les IP suspectes (en secondes)
IP_BLOCK_DURATION = 86400  # 24 heures

# Nombre maximum de tentatives de connexion avant blocage
MAX_LOGIN_ATTEMPTS = 5

# Durée de blocage après échec de connexion (en secondes)
LOGIN_BLOCK_DURATION = 300  # 5 minutes

# ===== Intégrations externes (Twilio, etc.) =====
# Pilotées par variables d'environnement; voir .env.example
# TWILIO_ENABLED=false par défaut pour éviter l'envoi en développement
TWILIO_ENABLED = os.getenv("TWILIO_ENABLED", "false").lower() in {"1", "true", "yes"}
