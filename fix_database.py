#!/usr/bin/env python
"""
Script pour r√©soudre les probl√®mes de base de donn√©es et migrations
"""
import os
import sys
import sqlite3

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecole_moderne.settings')

import django
django.setup()

from django.core.management import execute_from_command_line
from django.db import connection
from eleves.models import Ecole
from utilisateurs.models import Profil


def fix_database_constraints():
    """R√©soudre les probl√®mes de contraintes de base de donn√©es"""
    print("üîß R√©solution des probl√®mes de base de donn√©es...")
    
    try:
        # 1. V√©rifier et corriger les √©coles avec des slugs en conflit
        print("üìù V√©rification des slugs d'√©coles...")
        
        ecoles_sans_slug = Ecole.objects.filter(slug__isnull=True)
        ecoles_slug_default = Ecole.objects.filter(slug="ecole-default")
        
        print(f"   - √âcoles sans slug: {ecoles_sans_slug.count()}")
        print(f"   - √âcoles avec slug par d√©faut: {ecoles_slug_default.count()}")
        
        # Corriger les slugs
        for i, ecole in enumerate(ecoles_sans_slug):
            from django.utils.text import slugify
            import uuid
            base_slug = slugify(ecole.nom) or "ecole"
            unique_slug = f"{base_slug}-{str(uuid.uuid4())[:8]}"
            ecole.slug = unique_slug
            ecole.save()
            print(f"   ‚úÖ Slug g√©n√©r√© pour {ecole.nom}: {unique_slug}")
        
        for i, ecole in enumerate(ecoles_slug_default):
            from django.utils.text import slugify
            import uuid
            base_slug = slugify(ecole.nom) or "ecole"
            unique_slug = f"{base_slug}-{str(uuid.uuid4())[:8]}"
            ecole.slug = unique_slug
            ecole.save()
            print(f"   ‚úÖ Slug corrig√© pour {ecole.nom}: {unique_slug}")
        
        # 2. V√©rifier les profils utilisateurs
        print("üë• V√©rification des profils utilisateurs...")
        
        from django.contrib.auth.models import User
        users_sans_profil = User.objects.filter(profil__isnull=True)
        profils_sans_ecole = Profil.objects.filter(ecole__isnull=True)
        
        print(f"   - Utilisateurs sans profil: {users_sans_profil.count()}")
        print(f"   - Profils sans √©cole: {profils_sans_ecole.count()}")
        
        # Cr√©er une √©cole par d√©faut si n√©cessaire
        ecole_defaut = Ecole.objects.first()
        if not ecole_defaut:
            ecole_defaut = Ecole.objects.create(
                nom="√âcole Moderne",
                slug="ecole-moderne-default",
                type_ecole="PRIVEE",
                adresse="Conakry, Guin√©e",
                ville="Conakry",
                prefecture="Conakry",
                telephone="+224622613559",
                email="contact@ecole-moderne.gn",
                directeur="Direction G√©n√©rale",
                statut="ACTIVE"
            )
            print(f"   ‚úÖ √âcole par d√©faut cr√©√©e: {ecole_defaut.nom}")
        
        # Assigner les profils sans √©cole
        for profil in profils_sans_ecole:
            profil.ecole = ecole_defaut
            profil.save()
            print(f"   ‚úÖ √âcole assign√©e au profil: {profil.user.username}")
        
        print("‚úÖ Probl√®mes de base de donn√©es r√©solus!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        return False


def reset_migrations():
    """R√©initialiser les migrations si n√©cessaire"""
    print("üîÑ V√©rification des migrations...")
    
    try:
        # Appliquer les migrations en attente
        execute_from_command_line(['manage.py', 'migrate'])
        print("‚úÖ Migrations appliqu√©es avec succ√®s!")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Probl√®me avec les migrations: {e}")
        return False


def main():
    """Point d'entr√©e principal"""
    print("üöÄ D√©marrage de la correction de la base de donn√©es...\n")
    
    success = True
    
    # 1. Corriger les contraintes
    if not fix_database_constraints():
        success = False
    
    print()
    
    # 2. Appliquer les migrations
    if not reset_migrations():
        success = False
    
    print()
    
    if success:
        print("üéâ Toutes les corrections ont √©t√© appliqu√©es avec succ√®s!")
        print("\nVous pouvez maintenant:")
        print("1. Ex√©cuter: python test_multi_tenant.py")
        print("2. D√©marrer le serveur: python manage.py runserver")
        print("3. Initialiser les donn√©es: python manage.py init_multi_tenant")
    else:
        print("‚ùå Certaines corrections ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        sys.exit(1)


if __name__ == "__main__":
    main()
