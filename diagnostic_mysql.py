#!/usr/bin/env python3
"""
Script de diagnostic pour tester la connexion MySQL sur PythonAnywhere
"""
import os
import sys
import django
from pathlib import Path

# Configuration du chemin Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# Configuration de Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecole_moderne.settings_production')
django.setup()

from django.db import connection
from django.core.management import execute_from_command_line
import pymysql

def test_pymysql_direct():
    """Test direct de connexion PyMySQL"""
    print("üîç Test de connexion PyMySQL directe...")
    try:
        conn = pymysql.connect(
            host='myschoolgn.mysql.pythonanywhere-services.com',
            user='myschoolgn',
            password='Faraleno1994@',
            database='myschoolgn$myschooldb',
            port=3306,
            charset='utf8mb4'
        )
        print("‚úÖ Connexion PyMySQL directe r√©ussie")
        
        cursor = conn.cursor()
        cursor.execute("SELECT VERSION()")
        version = cursor.fetchone()
        print(f"üìä Version MySQL: {version[0]}")
        
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        print(f"üìã Nombre de tables: {len(tables)}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur connexion PyMySQL: {e}")
        return False

def test_django_connection():
    """Test de connexion Django"""
    print("\nüîç Test de connexion Django...")
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            print("‚úÖ Connexion Django r√©ussie")
            return True
    except Exception as e:
        print(f"‚ùå Erreur connexion Django: {e}")
        return False

def test_database_operations():
    """Test des op√©rations de base de donn√©es"""
    print("\nüîç Test des op√©rations de base de donn√©es...")
    try:
        from django.contrib.auth.models import User
        user_count = User.objects.count()
        print(f"‚úÖ Nombre d'utilisateurs: {user_count}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur op√©rations DB: {e}")
        return False

def check_database_settings():
    """V√©rification des param√®tres de base de donn√©es"""
    print("\nüîç V√©rification des param√®tres de base de donn√©es...")
    from django.conf import settings
    
    db_config = settings.DATABASES['default']
    print(f"Engine: {db_config['ENGINE']}")
    print(f"Name: {db_config['NAME']}")
    print(f"User: {db_config['USER']}")
    print(f"Host: {db_config['HOST']}")
    print(f"Port: {db_config['PORT']}")
    print(f"Options: {db_config.get('OPTIONS', {})}")

def main():
    print("üöÄ Diagnostic de connexion MySQL pour √âcole Moderne")
    print("=" * 60)
    
    # V√©rification des param√®tres
    check_database_settings()
    
    # Tests de connexion
    pymysql_ok = test_pymysql_direct()
    django_ok = test_django_connection()
    
    if django_ok:
        db_ops_ok = test_database_operations()
    else:
        db_ops_ok = False
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DU DIAGNOSTIC")
    print("=" * 60)
    print(f"PyMySQL direct: {'‚úÖ OK' if pymysql_ok else '‚ùå √âCHEC'}")
    print(f"Django connection: {'‚úÖ OK' if django_ok else '‚ùå √âCHEC'}")
    print(f"Op√©rations DB: {'‚úÖ OK' if db_ops_ok else '‚ùå √âCHEC'}")
    
    if not pymysql_ok:
        print("\nüîß RECOMMANDATIONS:")
        print("1. V√©rifier que la base de donn√©es 'myschoolgn$myschooldb' existe")
        print("2. V√©rifier les identifiants MySQL dans PythonAnywhere")
        print("3. V√©rifier que l'utilisateur 'myschoolgn' a les permissions")
        print("4. V√©rifier la connectivit√© r√©seau vers le serveur MySQL")
    elif not django_ok:
        print("\nüîß RECOMMANDATIONS:")
        print("1. V√©rifier la configuration Django settings_production.py")
        print("2. V√©rifier que PyMySQL est install√© correctement")
        print("3. V√©rifier les migrations Django")
    elif not db_ops_ok:
        print("\nüîß RECOMMANDATIONS:")
        print("1. Ex√©cuter les migrations Django")
        print("2. Cr√©er un superutilisateur")
        print("3. V√©rifier l'int√©grit√© des tables")

if __name__ == "__main__":
    main()
