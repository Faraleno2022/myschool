#!/usr/bin/env python
"""
Script pour v√©rifier l'installation PostgreSQL et pr√©parer la configuration
Usage: python check_postgresql.py
"""

import subprocess
import sys
import os
from pathlib import Path

def check_postgresql_installation():
    """V√©rifier si PostgreSQL est install√©"""
    print("üîç V√©rification de l'installation PostgreSQL...")
    
    # Chemins possibles pour PostgreSQL sur Windows
    possible_paths = [
        r"C:\Program Files\PostgreSQL\16\bin",
        r"C:\Program Files\PostgreSQL\15\bin",
        r"C:\Program Files\PostgreSQL\14\bin",
        r"C:\Program Files (x86)\PostgreSQL\16\bin",
        r"C:\Program Files (x86)\PostgreSQL\15\bin",
    ]
    
    # V√©rifier psql dans le PATH
    try:
        result = subprocess.run(['psql', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ PostgreSQL trouv√© dans le PATH: {result.stdout.strip()}")
            return True
    except (subprocess.TimeoutExpired, FileNotFoundError):
        pass
    
    # V√©rifier dans les chemins possibles
    for path in possible_paths:
        psql_path = Path(path) / "psql.exe"
        if psql_path.exists():
            print(f"‚úÖ PostgreSQL trouv√©: {psql_path}")
            print(f"   Ajoutez {path} √† votre PATH pour utiliser psql")
            return True
    
    print("‚ùå PostgreSQL non trouv√©")
    return False

def check_postgresql_service():
    """V√©rifier si le service PostgreSQL fonctionne"""
    print("üîç V√©rification du service PostgreSQL...")
    
    try:
        result = subprocess.run([
            'sc', 'query', 'postgresql-x64-16'
        ], capture_output=True, text=True, timeout=10)
        
        if 'RUNNING' in result.stdout:
            print("‚úÖ Service PostgreSQL en cours d'ex√©cution")
            return True
        elif 'STOPPED' in result.stdout:
            print("‚ö†Ô∏è  Service PostgreSQL arr√™t√©")
            print("   D√©marrez-le avec: net start postgresql-x64-16")
            return False
        else:
            # Essayer d'autres noms de service
            for service_name in ['postgresql-x64-15', 'postgresql-x64-14', 'PostgreSQL']:
                result = subprocess.run([
                    'sc', 'query', service_name
                ], capture_output=True, text=True, timeout=10)
                
                if 'RUNNING' in result.stdout:
                    print(f"‚úÖ Service PostgreSQL ({service_name}) en cours d'ex√©cution")
                    return True
            
            print("‚ùå Service PostgreSQL non trouv√© ou arr√™t√©")
            return False
            
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Impossible de v√©rifier le service PostgreSQL")
        return False

def test_connection():
    """Tester la connexion √† PostgreSQL"""
    print("üîç Test de connexion PostgreSQL...")
    
    try:
        # Essayer de se connecter √† la base postgres par d√©faut
        result = subprocess.run([
            'psql', '-h', 'localhost', '-p', '5432', '-U', 'postgres', 
            '-d', 'postgres', '-c', 'SELECT version();'
        ], capture_output=True, text=True, timeout=15, input='\n')
        
        if result.returncode == 0:
            print("‚úÖ Connexion PostgreSQL r√©ussie")
            return True
        else:
            print(f"‚ùå Erreur de connexion: {result.stderr}")
            return False
            
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Impossible de tester la connexion")
        return False

def show_configuration_template():
    """Afficher le template de configuration .env"""
    print("\n" + "="*50)
    print("üìù CONFIGURATION POUR VOTRE PROJET")
    print("="*50)
    
    print("\nModifiez votre fichier .env avec ces param√®tres :")
    print("""
# Configuration PostgreSQL
DATABASE_ENGINE=postgresql
DATABASE_NAME=ecole_moderne
DATABASE_USER=postgres
DATABASE_PASSWORD=VotreMotDePasse
DATABASE_HOST=localhost
DATABASE_PORT=5432
""")
    
    print("Remplacez 'VotreMotDePasse' par le mot de passe que vous avez d√©fini lors de l'installation.")

def show_next_steps():
    """Afficher les prochaines √©tapes"""
    print("\n" + "="*50)
    print("üöÄ PROCHAINES √âTAPES")
    print("="*50)
    
    print("\n1. Si PostgreSQL n'est pas install√© :")
    print("   - T√©l√©chargez depuis: https://www.postgresql.org/download/windows/")
    print("   - Installez avec le mot de passe: EcoleModerne2024!")
    print("   - Red√©marrez votre terminal apr√®s installation")
    
    print("\n2. Une fois PostgreSQL install√© :")
    print("   - Modifiez votre fichier .env (voir configuration ci-dessus)")
    print("   - Ex√©cutez: python setup_postgresql.py --all")
    
    print("\n3. Pour v√©rifier √† nouveau :")
    print("   - Ex√©cutez: python check_postgresql.py")

def main():
    print("üîß V√©rification PostgreSQL pour √âcole Moderne")
    print("="*50)
    
    # V√©rifications
    installation_ok = check_postgresql_installation()
    service_ok = False
    connection_ok = False
    
    if installation_ok:
        service_ok = check_postgresql_service()
        if service_ok:
            connection_ok = test_connection()
    
    # R√©sum√©
    print("\n" + "="*50)
    print("üìä R√âSUM√â")
    print("="*50)
    print(f"Installation PostgreSQL: {'‚úÖ' if installation_ok else '‚ùå'}")
    print(f"Service PostgreSQL:      {'‚úÖ' if service_ok else '‚ùå'}")
    print(f"Connexion PostgreSQL:    {'‚úÖ' if connection_ok else '‚ùå'}")
    
    if installation_ok and service_ok and connection_ok:
        print("\nüéâ PostgreSQL est pr√™t √† √™tre utilis√© !")
        show_configuration_template()
        print("\nEx√©cutez maintenant: python setup_postgresql.py --all")
    else:
        show_next_steps()
    
    return installation_ok and service_ok and connection_ok

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
