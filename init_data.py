#!/usr/bin/env python
"""
Script d'initialisation des donn√©es de base pour l'√âcole Moderne myschool
"""
import os
import sys
import django
from decimal import Decimal

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecole_moderne.settings')
django.setup()

from django.contrib.auth.models import User
from eleves.models import Ecole, Classe, GrilleTarifaire
from paiements.models import TypePaiement, ModePaiement
from depenses.models import CategorieDepense
from utilisateurs.models import ParametreSysteme

def init_ecoles():
    """Initialiser les √©coles"""
    print("üè´ Initialisation des √©coles...")
    
    ecole, created = Ecole.objects.get_or_create(
        nom="√âcole Moderne myschool",
        defaults={
            'adresse': "Conakry, Guin√©e",
            'telephone': "+22462200000",
            'email': "contact@ecole-hadja-kanfing.gn",
            'directeur': "Directeur de l'√âcole"
        }
    )
    
    if created:
        print(f"‚úÖ √âcole cr√©√©e: {ecole.nom}")
    else:
        print(f"‚ÑπÔ∏è  √âcole existante: {ecole.nom}")
    
    return ecole

def init_classes(ecole):
    """Initialiser les classes"""
    print("üìö Initialisation des classes...")
    
    classes_data = [
        # Garderie et Maternelle
        ('GARDERIE', 'Garderie', 'GARDERIE'),
        ('MATERNELLE', 'Maternelle', 'MATERNELLE'),
        
        # Primaire
        ('PRIMAIRE_1', 'Primaire 1√®re ann√©e', 'PRIMAIRE_1'),
        ('PRIMAIRE_2', 'Primaire 2√®me ann√©e', 'PRIMAIRE_2'),
        ('PRIMAIRE_3', 'Primaire 3√®me ann√©e', 'PRIMAIRE_3'),
        ('PRIMAIRE_4', 'Primaire 4√®me ann√©e', 'PRIMAIRE_4'),
        ('PRIMAIRE_5', 'Primaire 5√®me ann√©e', 'PRIMAIRE_5'),
        ('PRIMAIRE_6', 'Primaire 6√®me ann√©e', 'PRIMAIRE_6'),
        
        # Coll√®ge
        ('COLLEGE_7', 'Coll√®ge 7√®me ann√©e', 'COLLEGE_7'),
        ('COLLEGE_8', 'Coll√®ge 8√®me ann√©e', 'COLLEGE_8'),
        ('COLLEGE_9', 'Coll√®ge 9√®me ann√©e', 'COLLEGE_9'),
        ('COLLEGE_10', 'Coll√®ge 10√®me ann√©e', 'COLLEGE_10'),
        
        # Lyc√©e
        ('LYCEE_11', 'Lyc√©e 11√®me ann√©e', 'LYCEE_11'),
        ('LYCEE_12', 'Lyc√©e 12√®me ann√©e', 'LYCEE_12'),
        ('TERMINALE', 'Terminale', 'TERMINALE'),
    ]
    
    classes_creees = []
    for code, nom, niveau in classes_data:
        classe, created = Classe.objects.get_or_create(
            ecole=ecole,
            nom=nom,
            defaults={
                'niveau': niveau,
                'annee_scolaire': '2024-2025'
            }
        )
        
        if created:
            print(f"‚úÖ Classe cr√©√©e: {classe.nom} ({classe.niveau})")
        else:
            print(f"‚ÑπÔ∏è  Classe existante: {classe.nom}")
        
        classes_creees.append(classe)
    
    return classes_creees

def init_grilles_tarifaires(ecole):
    """Initialiser les grilles tarifaires"""
    print("üí∞ Initialisation des grilles tarifaires...")
    
    # Niveaux avec leurs tarifs respectifs
    niveaux_tarifs = [
        ('GARDERIE', Decimal('400000'), Decimal('800000'), Decimal('800000')),
        ('MATERNELLE', Decimal('500000'), Decimal('900000'), Decimal('900000')),
        ('PRIMAIRE_1', Decimal('600000'), Decimal('1000000'), Decimal('1000000')),
        ('PRIMAIRE_2', Decimal('600000'), Decimal('1000000'), Decimal('1000000')),
        ('PRIMAIRE_3', Decimal('650000'), Decimal('1100000'), Decimal('1100000')),
        ('PRIMAIRE_4', Decimal('650000'), Decimal('1100000'), Decimal('1100000')),
        ('PRIMAIRE_5', Decimal('700000'), Decimal('1200000'), Decimal('1200000')),
        ('PRIMAIRE_6', Decimal('700000'), Decimal('1200000'), Decimal('1200000')),
        ('COLLEGE_7', Decimal('800000'), Decimal('1400000'), Decimal('1400000')),
        ('COLLEGE_8', Decimal('800000'), Decimal('1400000'), Decimal('1400000')),
        ('COLLEGE_9', Decimal('900000'), Decimal('1500000'), Decimal('1500000')),
        ('COLLEGE_10', Decimal('900000'), Decimal('1500000'), Decimal('1500000')),
        ('LYCEE_11', Decimal('1000000'), Decimal('1600000'), Decimal('1600000')),
        ('LYCEE_12', Decimal('1000000'), Decimal('1600000'), Decimal('1600000')),
        ('TERMINALE', Decimal('1100000'), Decimal('1700000'), Decimal('1700000')),
    ]
    
    grilles_creees = []
    for niveau, inscription, tranche1, tranche2 in niveaux_tarifs:
        grille, created = GrilleTarifaire.objects.get_or_create(
            ecole=ecole,
            niveau=niveau,
            annee_scolaire='2024-2025',
            defaults={
                'frais_inscription': inscription,
                'tranche_1': tranche1,
                'tranche_2': tranche2,
                'tranche_3': tranche2,  # M√™me montant pour les tranches 2 et 3
                'periode_1': "√Ä l'inscription",
                'periode_2': 'D√©but janvier',
                'periode_3': 'D√©but mars'
            }
        )
        
        if created:
            print(f"‚úÖ Grille tarifaire cr√©√©e: {niveau} - {inscription} GNF")
        else:
            print(f"‚ÑπÔ∏è  Grille tarifaire existante: {niveau}")
        
        grilles_creees.append(grille)
    
    return grilles_creees

def init_types_paiements():
    """Initialiser les types de paiements"""
    print("üí≥ Initialisation des types de paiements...")
    
    types_data = [
        ('Frais d\'inscription', 'Paiement des frais d\'inscription annuels'),
        ('Scolarit√© 1√®re tranche', 'Frais de scolarit√© de la premi√®re tranche'),
        ('Scolarit√© 2√®me tranche', 'Frais de scolarit√© de la deuxi√®me tranche'),
        ('Scolarit√© 3√®me tranche', 'Frais de scolarit√© de la troisi√®me tranche'),
        ('Transport scolaire', 'Frais de transport scolaire'),
        ('Cantine scolaire', 'Frais de restauration scolaire'),
        ('Frais d\'examen', 'Frais li√©s aux examens et √©valuations'),
        ('Fournitures scolaires', 'Achat de fournitures scolaires'),
        ('Uniforme scolaire', 'Achat d\'uniformes scolaires'),
        ('Activit√©s extra-scolaires', 'Frais pour activit√©s sportives et culturelles'),
    ]
    
    for nom, description in types_data:
        type_paiement, created = TypePaiement.objects.get_or_create(
            nom=nom,
            defaults={
                'description': description,
                'actif': True
            }
        )
        
        if created:
            print(f"‚úÖ Type de paiement cr√©√©: {type_paiement.nom}")
        else:
            print(f"‚ÑπÔ∏è  Type de paiement existant: {type_paiement.nom}")

def init_modes_paiements():
    """Initialiser les modes de paiements"""
    print("üí∞ Initialisation des modes de paiements...")
    
    modes_data = [
        ('Esp√®ces', 'Paiement en esp√®ces (GNF)', True, Decimal('0')),
        ('Ch√®que', 'Paiement par ch√®que bancaire', True, Decimal('0')),
        ('Virement bancaire', 'Virement sur compte bancaire de l\'ecole', True, Decimal('0')),
        ('Mobile Money', 'Paiement via Orange Money, MTN Money, etc.', True, Decimal('5000')),  # Frais de 5000 GNF
        ('Carte bancaire', 'Paiement par carte bancaire', False, Decimal('0')),  # Pas encore disponible
        ('Cr√©dit', 'Paiement diff√©r√© ou √©chelonn√©', True, Decimal('0')),
    ]
    
    for nom, description, actif, frais in modes_data:
        mode_paiement, created = ModePaiement.objects.get_or_create(
            nom=nom,
            defaults={
                'description': description,
                'actif': actif,
                'frais_supplementaires': frais
            }
        )
        
        if created:
            print(f"‚úÖ Mode de paiement cr√©√©: {mode_paiement.nom}")
        else:
            print(f"‚ÑπÔ∏è  Mode de paiement existant: {mode_paiement.nom}")

def init_categories_depenses():
    """Initialiser les cat√©gories de d√©penses"""
    print("üìä Initialisation des cat√©gories de d√©penses...")
    
    categories_data = [
        ('SALAIRES', 'Salaires et charges', 'R√©mun√©ration du personnel et charges sociales'),
        ('FOURNITURES', 'Fournitures p√©dagogiques', 'Mat√©riel p√©dagogique et fournitures scolaires'),
        ('MAINTENANCE', 'Maintenance et r√©parations', 'Entretien des b√¢timents et √©quipements'),
        ('UTILITIES', 'Services publics', '√âlectricit√©, eau, internet, t√©l√©phone'),
        ('TRANSPORT', 'Transport', 'Frais de transport et carburant'),
        ('FORMATION', 'Formation du personnel', 'Formation continue des enseignants'),
        ('EQUIPEMENTS', '√âquipements', 'Achat d\'√©quipements et mobilier'),
        ('ADMIN', 'Frais administratifs', 'Frais de gestion et administration'),
        ('SECURITE', 'S√©curit√©', 'Services de s√©curit√© et surveillance'),
        ('ALIMENT', 'Alimentation', 'Frais de cantine et restauration'),
    ]
    
    for code, nom, description in categories_data:
        categorie, created = CategorieDepense.objects.get_or_create(
            code=code,
            defaults={
                'nom': nom,
                'description': description,
                'actif': True
            }
        )
        
        
        if created:
            print(f"‚úÖ Cat√©gorie de d√©pense cr√©√©e: {categorie.nom}")
        else:
            print(f"‚ÑπÔ∏è  Cat√©gorie de d√©pense existante: {categorie.nom}")

def init_parametres_systeme():
    """Initialiser les param√®tres syst√®me"""
    print("‚öôÔ∏è  Initialisation des param√®tres syst√®me...")
    
    parametres_data = [
        ('ANNEE_SCOLAIRE_COURANTE', '2024-2025', 'Ann√©e scolaire en cours'),
        ('DEVISE', 'GNF', 'Devise utilis√©e (Franc Guin√©en)'),
        ('LANGUE_DEFAUT', 'fr', 'Langue par d√©faut de l\'application'),
        ('FUSEAU_HORAIRE', 'Africa/Conakry', 'Fuseau horaire de l\'√©cole'),
        ('EMAIL_NOTIFICATIONS', 'true', 'Activer les notifications par email'),
        ('BACKUP_AUTO', 'true', 'Sauvegarde automatique activ√©e'),
        ('MODE_MAINTENANCE', 'false', 'Mode maintenance de l\'application'),
    ]
    
    for cle, valeur, description in parametres_data:
        parametre, created = ParametreSysteme.objects.get_or_create(
            cle=cle,
            defaults={
                'valeur': valeur,
                'description': description,
                'modifie_par': User.objects.filter(is_superuser=True).first()
            }
        )
        
        if created:
            print(f"‚úÖ Param√®tre cr√©√©: {parametre.cle} = {parametre.valeur}")
        else:
            print(f"‚ÑπÔ∏è  Param√®tre existant: {parametre.cle} = {parametre.valeur}")

def main():
    """Fonction principale d'initialisation"""
    print("üöÄ Initialisation des donn√©es de base pour l'√âcole Moderne myschool")
    print("=" * 80)
    
    try:
        # Initialiser les donn√©es de base
        ecole = init_ecoles()
        classes = init_classes(ecole)
        grille = init_grilles_tarifaires(ecole)
        init_types_paiements()
        init_modes_paiements()
        init_categories_depenses()
        init_parametres_systeme()
        
        print("\n" + "=" * 80)
        print("‚úÖ Initialisation termin√©e avec succ√®s !")
        print(f"üìä R√©sum√©:")
        print(f"   - 1 √©cole initialis√©e")
        print(f"   - {len(classes)} classes cr√©√©es")
        print(f"   - 1 grille tarifaire configur√©e")
        print(f"   - Types et modes de paiements configur√©s")
        print(f"   - Cat√©gories de d√©penses configur√©es")
        print(f"   - Param√®tres syst√®me configur√©s")
        print("\nüéì L'application est pr√™te √† √™tre utilis√©e !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
